generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                           String    @id @default(cuid())
  name                         String?
  email                        String    @unique
  pendingEmail                 String?   @unique
  emailVerified                DateTime?
  image                        String?
  password                     String?
  role                         Role      @default(USER)
  phone                        String?
  emailChangeVerificationToken String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts           Account[]
  Blog               Blog[]
  Product            Product[]
  Cart               Cart?
  Order              Order[]
  PasswordResetToken PasswordResetToken?
  Address            Address[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String   @unique // Kunci unik ke model User
  token   String   @unique // Token unik yang dikirim via email
  expires DateTime // Kapan token akan kedaluwarsa

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blogs     Blog[]
}

model Blog {
  id           String       @id @default(cuid())
  title        String
  slug         String       @unique
  content      String
  imageUrl     String // URL gambar blog
  BlogCategory BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId   String
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Address {
  id         String  @id @default(cuid())
  label      String? // Misal: "Rumah", "Kantor"
  recipient  String // Nama penerima
  phone      String
  street     String
  province   String // Province = Provinsi
  regency    String // City | Kota = Regency | Kabupaten
  district   String // District = Kecamatan
  village    String // Village | Kampung = Urbah Village = Kelurahan
  postalCode String
  isDefault  Boolean @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Order Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, label])
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String   @db.VarChar(255)
  description String?  @db.Text
  // price       Int
  // stock       Int      @default(0)
  imageUrl    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId          String
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId      String
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id])
  // CartItem        CartItem[]
  // OrderItem       OrderItem[]

  ProductVariant ProductVariant[] // ðŸ”¥ Relasi ke varian spesifik
  VariationType  VariationType[] // ðŸ”¥ Tipe variasi yang dimiliki produk ini (misal: Warna & Ukuran)
}

model VariationType {
  id        String  @id @default(cuid())
  name      String  @db.VarChar(50) // Contoh: "Warna", "Ukuran"
  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  VariationOptions VariationOption[] // Opsi dari tipe variasi ini (misal: "Merah", "S", "M")

  @@unique([productId, name])
}

model VariationOption {
  id              String        @id @default(cuid())
  value           String        @db.VarChar(50) // Contoh: "Merah", "Biru", "S", "M"
  variationTypeId String
  VariationType   VariationType @relation(fields: [variationTypeId], references: [id], onDelete: Cascade)

  VariantCombinations ProductVariantOption[]

  @@unique([variationTypeId, value])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // ðŸ”¥ Detail yang unik per variasi
  sku             String? @unique // Kode SKU
  price           Int // Harga spesifik varian ini
  stock           Int     @default(0) // Stok spesifik varian ini
  variantImageUrl String? // Gambar khusus untuk varian ini (misal: kemeja Merah)

  Options   ProductVariantOption[]
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model ProductVariantOption {
  productVariantId  String
  ProductVariant    ProductVariant  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  variationOptionId String
  VariationOption   VariationOption @relation(fields: [variationOptionId], references: [id], onDelete: Cascade)

  @@id([productVariantId, variationOptionId])
}

model ProductCategory {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String   @db.VarChar(255)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Product[]
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CartItem CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  isChecked Boolean @default(false)

  cartId           String
  Cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  // productId String
  // Product   Product @relation(fields: [productId], references: [id])
  productVariantId String
  ProductVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productVariantId])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Int
  status      OrderStatus @default(PENDING)
  OrderItem   OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Address     Address?    @relation(fields: [addressId], references: [id])
  addressId   String?
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  Order   Order  @relation(fields: [orderId], references: [id])

  productVariantId String
  ProductVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  quantity Int
  price    Int
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
