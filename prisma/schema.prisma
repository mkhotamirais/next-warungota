generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  phone         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Blog    Blog[]
  Product Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blogs     Blog[]
}

model Blog {
  id           String       @id @default(cuid())
  title        String
  slug         String       @unique
  content      String
  imageUrl     String // URL gambar blog
  BlogCategory BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId   String
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String   @db.VarChar(255)
  description String?  @db.Text
  price       Int
  stock       Int      @default(0)
  imageUrl    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId          String
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId      String
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id])
}

model ProductCategory {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String   @db.VarChar(255)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Product[]
}
